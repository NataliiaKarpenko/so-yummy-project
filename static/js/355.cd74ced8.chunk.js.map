{"version":3,"file":"static/js/355.cd74ced8.chunk.js","mappings":"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","sources":["shared/components/Auth/AuthInputs/EmailInput.jsx","shared/components/Auth/AuthFormVisibilityButton/AuthFormVisibilityButton.styled.js","shared/components/Auth/AuthFormVisibilityButton/AuthFormVisibilityButton.jsx","shared/components/Auth/AuthInputs/PasswordInput.jsx","shared/components/Auth/AuthNav/AuthNav.styled.js","shared/components/Auth/AuthNav/AuthNav.jsx","shared/components/Auth/AuthStyles/AuthForm.styled.js"],"sourcesContent":["import {\n  StyledInputBox,\n  StyledField,\n  StyledErrorMessage,\n  StyledMessage,\n} from './AuthFormInputs.styled';\nimport icons from '../../../../shared/sprite.svg';\n\nconst EmailInput = ({ className, errors, touched, onFocus, onBlur }) => {\n  return (\n    <div>\n      <StyledInputBox\n        className={\n          (errors.email && touched.email && 'InvalidInput') ||\n          (!errors.email && touched.email && 'ValidInput') ||\n          `${className}`\n        }\n      >\n        <svg width=\"18\" height=\"18\" aria-label=\"user\" className=\"InputIcon\">\n          <use href={icons + '#email'}></use>\n        </svg>\n        <StyledField\n          type=\"email\"\n          name=\"email\"\n          className={className}\n          placeholder=\"Email\"\n          autoComplete=\"off\"\n          onFocus={onFocus}\n          onBlur={onBlur}\n        />\n        {errors.email && touched.email && (\n          <svg width=\"20\" height=\"20\" aria-label=\"error\" className=\"ErrorIcon\">\n            <use href={icons + '#errorLogo'}></use>\n          </svg>\n        )}\n        {!errors.email && touched.email && (\n          <svg width=\"20\" height=\"20\" aria-label=\"tick\" className=\"SuccessIcon\">\n            <use href={icons + '#tickLogo'}></use>\n          </svg>\n        )}\n      </StyledInputBox>\n      {!errors.email && touched.email && (\n        <StyledMessage>Email is valid</StyledMessage>\n      )}\n      <StyledErrorMessage name=\"email\" component=\"p\" />\n    </div>\n  );\n};\n\nexport default EmailInput;\n","import styled from 'styled-components';\n\nexport const StyledAuthFormVisibilityBtnContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.5;\n  letter-spacing: -0.02em;\n  color: rgba(250, 250, 250, 0.8);\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n\n  button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    background-color: transparent;\n    border: none;\n\n    fill: rgba(250, 250, 250, 0.8);\n\n    transition: all var(--transition-dur-func);\n\n    &:hover {\n      scale: 1.1;\n      fill: var(--form-hover-state-color);\n    }\n  }\n`;\n","import icons from '../../../sprite.svg';\nimport { StyledAuthFormVisibilityBtnContainer } from './AuthFormVisibilityButton.styled';\n\nconst AuthFormVisibilityButton = ({ passwordType, togglePassword }) => {\n  return (\n    <StyledAuthFormVisibilityBtnContainer>\n      <button type=\"button\" onClick={togglePassword}>\n        {passwordType === 'password' ? (\n          <svg width=\"15\" height=\"15\" aria-label=\"eye\">\n            <use href={icons + '#eye'}></use>\n          </svg>\n        ) : (\n          <svg width=\"15\" height=\"15\" aria-label=\"blocked eye\">\n            <use href={icons + '#eyeBlocked'}></use>\n          </svg>\n        )}\n      </button>\n      <p>Show password</p>\n    </StyledAuthFormVisibilityBtnContainer>\n  );\n};\n\nexport default AuthFormVisibilityButton;\n","import { useState } from 'react';\n\nimport {\n  StyledInputBox,\n  StyledField,\n  StyledMessage,\n  StyledErrorMessage,\n  StyledPasswordRequirements,\n} from './AuthFormInputs.styled';\nimport icons from '../../../../shared/sprite.svg';\nimport AuthFormVisibilityButton from 'shared/components/Auth/AuthFormVisibilityButton/AuthFormVisibilityButton';\n\nconst PasswordInput = ({\n  className,\n  errors,\n  touched,\n  onChange,\n  onFocus,\n  onBlur,\n}) => {\n  const [message, setMessage] = useState('');\n  const [hovered, setHovered] = useState(false);\n  const [passwordType, setPasswordType] = useState('password');\n\n  const placeholderText = hovered\n    ? '\\u25CF\\u25CF\\u25CF\\u25CF\\u25CF\\u25CF'\n    : 'Password';\n\n  const handlePasswordChange = event => {\n    const passwordValue = event.target.value;\n    onChange(event);\n    const digitTest = /\\d/;\n    const letterTest = /[a-zA-Z]/;\n\n    if (!digitTest.test(passwordValue) && passwordValue.length >= 6) {\n      setMessage('Insecure password. Add at least one digit');\n    } else if (!letterTest.test(passwordValue) && passwordValue.length >= 6) {\n      setMessage('Insecure password. Add at least one letter');\n    } else {\n      setMessage('');\n    }\n  };\n\n  const togglePassword = () => {\n    if (passwordType === 'password') {\n      setPasswordType('text');\n      return;\n    }\n    setPasswordType('password');\n  };\n\n  return (\n    <div>\n      <StyledInputBox\n        className={\n          (errors.password && touched.password && 'InvalidInput') ||\n          (!errors.password && message && 'InsecureInput') ||\n          (!errors.password && !message && touched.password && 'ValidInput') ||\n          (!touched.password && `${className}`)\n        }\n      >\n        <svg width=\"18\" height=\"18\" aria-label=\"lock\" className=\"InputIcon\">\n          <use href={icons + '#lock'}></use>\n        </svg>\n        <StyledField\n          type={passwordType}\n          name=\"password\"\n          className={className}\n          placeholder={placeholderText}\n          autoComplete=\"off\"\n          onMouseEnter={() => setHovered(true)}\n          onMouseLeave={() => setHovered(false)}\n          onChange={handlePasswordChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n        />\n        {errors.password && touched.password && (\n          <svg width=\"20\" height=\"20\" aria-label=\"error\" className=\"ErrorIcon\">\n            <use href={icons + '#errorLogo'}></use>\n          </svg>\n        )}\n        {!errors.password && message && (\n          <svg\n            width=\"20\"\n            height=\"20\"\n            aria-label=\"exclamation mark\"\n            className=\"WarningIcon\"\n          >\n            <use href={icons + '#exclamationLogo'}></use>\n          </svg>\n        )}\n        {!errors.password && !message && touched.password && (\n          <svg width=\"20\" height=\"20\" aria-label=\"tick\" className=\"SuccessIcon\">\n            <use href={icons + '#tickLogo'}></use>\n          </svg>\n        )}\n      </StyledInputBox>\n\n      {!touched.password && !message && (\n        <StyledPasswordRequirements>\n          Password must be at least 6 characters long. Can contain letters and\n          digits\n        </StyledPasswordRequirements>\n      )}\n\n      {!errors.password && (\n        <StyledMessage message={message}>{message}</StyledMessage>\n      )}\n\n      {!errors.password && touched.password && !message && (\n        <StyledMessage>Password is secure</StyledMessage>\n      )}\n\n      <StyledErrorMessage name=\"password\" component=\"p\" />\n\n      <AuthFormVisibilityButton\n        passwordType={passwordType}\n        togglePassword={togglePassword}\n      />\n    </div>\n  );\n};\n\nexport default PasswordInput;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledAuthNav = styled(Link)`\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 1.5;\n  color: var(--primary-font-color);\n  text-decoration: underline;\n  transition: all var(--transition-dur-func);\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n\n  &:hover {\n    scale: 1.05;\n  }\n`;\n","import { StyledAuthNav } from './AuthNav.styled';\n\nconst AuthNav = ({ authNavLink, authNavText }) => {\n  return <StyledAuthNav to={authNavLink}>{authNavText}</StyledAuthNav>;\n};\n\nexport default AuthNav;\n","// import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledFormContainer = styled.div`\n  margin-bottom: 18px;\n\n  background-color: var(--main-background-color);\n  box-shadow: 0px 4px 48px rgba(0, 0, 0, 0.1);\n  border-radius: 30px;\n\n  @media screen and (max-width: 374px) {\n    width: 100%;\n    max-width: 335px;\n  }\n\n  @media screen and (min-width: 375px) {\n    width: 335px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 500px;\n  }\n\n  .FormContainer {\n    padding: 32px 28px;\n\n    display: flex;\n    flex-direction: column;\n\n    @media screen and (min-width: 768px) {\n      padding: 44px 50px;\n    }\n  }\n\n  .Title {\n    margin-bottom: 18px;\n    font-weight: 600;\n    font-size: 24px;\n    line-height: 1.17;\n    letter-spacing: -0.02em;\n    color: var(--primary-font-color);\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 32px;\n      font-size: 28px;\n      line-height: 1.07;\n    }\n  }\n\n  .SignupTitle {\n    margin-bottom: 18px;\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 32px;\n    }\n  }\n\n  .SigninTitle {\n    margin-bottom: 40px;\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 50px;\n    }\n  }\n\n  .InputsContainer {\n    margin-bottom: 28px;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 50px;\n      gap: 24px;\n    }\n  }\n`;\n"],"names":["className","errors","touched","onFocus","onBlur","email","width","height","href","icons","type","name","placeholder","autoComplete","component","StyledAuthFormVisibilityBtnContainer","styled","passwordType","togglePassword","onClick","onChange","useState","message","setMessage","hovered","setHovered","setPasswordType","placeholderText","password","onMouseEnter","onMouseLeave","event","passwordValue","target","value","test","length","StyledAuthNav","Link","authNavLink","authNavText","to","StyledFormContainer"],"sourceRoot":""}